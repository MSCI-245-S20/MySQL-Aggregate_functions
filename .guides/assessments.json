[
 {
  "type": "test",
  "taskId": "test-1260126282",
  "source": {
   "showName": true,
   "answers": [],
   "tokens": {
    "blank": [],
    "text": []
   },
   "name": "SQL MAX()",
   "instructions": "A `sql-6-2.sql` file has been opened for you.\n\nWrite each of the following tasks as a SQL statement in a new line (remember that you can `source` the file to compare the output reference): \n\n1. Select the newest product from the `e_store.products` table. Alias the column name as: `newest_product`. The output should look like this:\n```\n+---------------------+\n| newest_product      |\n+---------------------+\n| 2015-10-30 06:30:30 |\n+---------------------+\n1 row in set (0.01 sec)\n```\n2. Select the oldest product from the `e_store.products` table. Alias the column name as: `oldest_product`. The output should look like this;\n```\n+---------------------+\n| oldest_product      |\n+---------------------+\n| 2015-10-09 00:49:30 |\n+---------------------+\n1 row in set (0.01 sec)\n```\n\n---\nOnce you have completed these tasks press the _Check It!_ button to have your solution assessed.",
   "command": "node --no-warnings .guides/sqltests/sql-6-2.js",
   "points": 1
  }
 },
 {
  "type": "test",
  "taskId": "test-1426895341",
  "source": {
   "name": "SQL MIN()",
   "showName": true,
   "instructions": "A `sql-6-1.sql` file has been opened for you.\n\nWrite each of the following tasks as a SQL statement in a new line: \n\n1. Select the product with the least stock from the `e_store.products` table.  Be sure to use MIN and not Min and not min, etc. The autograder expects MIN. The output should look like this:\n```\n+------------+\n| MIN(stock) |\n+------------+\n|          1 |\n+------------+\n1 row in set (0.03 sec)\n```\n2. Select the product with the least stock from the `e_store.products` table aliasing the column name as: `min_stock`. The output should look like this:\n```\n+-----------+\n| min_stock |\n+-----------+\n|         1 |\n+-----------+\n1 row in set (0.01 sec)\n```\n3. Select the product with the least stock from the `e_store.products` table where the `id` is greater than 3. Alias the column name as: `min_stock`. The output should look like this:\n```\n+-----------+\n| min_stock |\n+-----------+\n|         4 |\n+-----------+\n1 row in set (0.02 sec)\n```\n\n---\nOnce you have completed these tasks press the _Check It!_ button to have your solution assessed.",
   "command": "node --no-warnings .guides/sqltests/sql-6-1.js",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "sql-6-1.sql"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "sql-6-1.sql"
     },
     {
      "type": "terminal",
      "panelNumber": 0,
      "content": "mysql"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-2082641079",
  "source": {
   "showName": true,
   "answers": [],
   "tokens": {
    "blank": [],
    "text": []
   },
   "name": "SQL SUM()",
   "instructions": "A `sql-6-5.sql` file has been opened for you.\n\nWrite each of the following tasks as a SQL statement in a new line (remember that you can `source` the file to compare the output reference): \n\n1. Use the `e_store` database\n2. Select the total stock of all products in the `products` table. Alias the column name as `total_stock`. The resulting table should look like this:\n```\n+-------------+\n| total_stock |\n+-------------+\n|          35 |\n+-------------+\n1 row in set (0.01 sec)\n```\n3. Select the total stars of the product with `id` = `4`. Alias the column name as `total_stars`. The resulting table should look like this:\n```\n+----+-------------+\n| id | total_stars |\n+----+-------------+\n|  4 |           7 |\n+----+-------------+\n1 row in set (0.00 sec)\n```\n\n---\nOnce you have completed these tasks press the _Check It!_ button to have your solution assessed.",
   "command": "node --no-warnings .guides/sqltests/sql-6-5.js",
   "points": 1
  }
 },
 {
  "type": "test",
  "taskId": "test-2186222225",
  "source": {
   "showName": true,
   "answers": [],
   "tokens": {
    "blank": [],
    "text": []
   },
   "name": "SQL COUNT()",
   "instructions": "A `sql-6-6.sql` file has been opened for you.\n\nWrite each of the following tasks as a SQL statement in a new line (remember that you can `source` the file to compare the output reference): \n\n1. Use the `e_store` database\n2. Select the total amount of products in the `products` table. Alias the column name as `total_product_count`. The resulting table should look like this:\n```\n+---------------------+\n| total_product_count |\n+---------------------+\n|                   6 |\n+---------------------+\n1 row in set (0.01 sec)\n```\n3. Select the total `stars` field count of the product with `id` = `4`. Alias the column name as `stars_fields_count`. The resulting table should look like this:\n```\n+----+--------------------+\n| id | stars_fields_count |\n+----+--------------------+\n|  4 |                  2 |\n+----+--------------------+\n1 row in set (0.00 sec)\n```\n\n---\nOnce you have completed these tasks press the _Check It!_ button to have your solution assessed.",
   "command": "node --no-warnings .guides/sqltests/sql-6-6.js",
   "points": 1
  }
 },
 {
  "type": "test",
  "taskId": "test-2188673486",
  "source": {
   "showName": true,
   "answers": [],
   "tokens": {
    "blank": [],
    "text": []
   },
   "name": "SQL Group By",
   "instructions": "A `sql-6-9.sql` file has been opened for you.\n\nWrite each of the following tasks as a SQL statement in a new line (remember that you can `source` the file to compare the output reference): \n\n1. Use the `e_store` database\n2. Join the `products` and the `reviews` tables that would output this:\n```\n----+------------+-----------+\n| id | name       | avg_stars |\n+----+------------+-----------+\n|  2 | Smartphone |    2.3333 |\n|  3 | PC         |    3.0000 |\n+----+------------+-----------+\n2 rows in set (0.01 sec)\n```\n\n---\nOnce you have completed these tasks press the _Check It!_ button to have your solution assessed.",
   "command": "node --no-warnings .guides/sqltests/sql-6-9.js",
   "points": 1
  }
 },
 {
  "type": "test",
  "taskId": "test-2216583671",
  "source": {
   "showName": true,
   "answers": [],
   "tokens": {
    "blank": [],
    "text": []
   },
   "name": "SQL AVG()",
   "instructions": "A `sql-6-8.sql` file has been opened for you.\n\nWrite each of the following tasks as a SQL statement in a new line (remember that you can `source` the file to compare the output reference): \n\n1. Use the `e_store` database\n2. Display the average star rating of the `product_id` = `4` using the `AVG()` SQL function. \nIf executed, the result should look like this:\n```\n+----+------------+\n| id | AVG(stars) |\n+----+------------+\n|  4 |     3.5000 |\n+----+------------+\n1 row in set (0.00 sec)\n```\n\n---\nOnce you have completed these tasks press the _Check It!_ button to have your solution assessed.",
   "command": "node --no-warnings .guides/sqltests/sql-6-8.js",
   "points": 1
  }
 },
 {
  "type": "test",
  "taskId": "test-2381957877",
  "source": {
   "showName": true,
   "answers": [],
   "tokens": {
    "blank": [],
    "text": []
   },
   "name": "MIN() and MAX()",
   "instructions": "A `sql-6-10.sql` file has been opened for you.\n\nWrite each of the following tasks as a SQL statement in a new line (remember that you can `source` the file to compare the output reference): \n\n1. Select the minimum product stock and maximum product stock of the `e_store.products` table that would output this:\n```\n+-----------+-----------+\n| min_stock | max_stock |\n+-----------+-----------+\n|         1 |         9 |\n+-----------+-----------+\n1 row in set (0.01 sec)\n```\n\n---\nOnce you have completed these tasks press the _Check It!_ button to have your solution assessed.",
   "command": "node --no-warnings .guides/sqltests/sql-6-10.js",
   "points": 1
  }
 },
 {
  "type": "test",
  "taskId": "test-2818765884",
  "source": {
   "showName": true,
   "answers": [],
   "tokens": {
    "blank": [],
    "text": []
   },
   "name": "SUM() and COUNT()",
   "instructions": "A `sql-6-11.sql` file has been opened for you.\n\nWrite the following task as a SQL statement in a new line (remember that you can `source` the file to compare the output reference):\n\n1. Select the total stock and the total products from the `e_store.products` table in a single query. Alias the result as `total_stock` and `total_count` respectively.\nThe output should look like this:\n```\n+-------------+----------------+\n| total_stock | total_products |\n+-------------+----------------+\n|          35 |              6 |\n+-------------+----------------+\n1 row in set (0.06 sec)\n```\n\n---\nOnce you have completed these tasks press the _Check It!_ button to have your solution assessed.",
   "command": "node --no-warnings .guides/sqltests/sql-6-11.js",
   "points": 1
  }
 },
 {
  "type": "test",
  "taskId": "test-3147153916",
  "source": {
   "showName": true,
   "answers": [],
   "tokens": {
    "blank": [],
    "text": []
   },
   "name": "SQL Average",
   "instructions": "A `sql-6-7.sql` file has been opened for you.\n\nWrite each of the following tasks as a SQL statement in a new line (remember that you can `source` the file to compare the output reference): \n\n1. Use the `e_store` database\n1. Get the average rating of `product_id` `4`. Alias the average result as: `avg_rating`. \nThe result should look like this:\n```\n+----+------------+\n| id | avg_rating |\n+----+------------+\n|  4 |     3.5000 |\n+----+------------+\n1 row in set (0.08 sec)\n```\n\n---\nOnce you have completed these tasks press the _Check It!_ button to have your solution assessed.",
   "command": "node --no-warnings .guides/sqltests/sql-6-7.js",
   "points": 1
  }
 },
 {
  "type": "test",
  "taskId": "test-3390707296",
  "source": {
   "showName": true,
   "answers": [],
   "tokens": {
    "blank": [],
    "text": []
   },
   "name": "Group By - Having",
   "instructions": "A `sql-6-12.sql` file has been opened for you.\n\nWrite each of the following tasks as a SQL statement in a new line (remember that you can `source` the file to compare the output reference): \n\n1. Use the `e_store` database\n2. Join the `products` and the `reviews` in a `SELECT` query that would output this:\n```\n+------------+--------+-------+-----------+\n| name       | price  | stock | avg_stars |\n+------------+--------+-------+-----------+\n| Tablet     | 145.50 |     8 |    4.0000 |\n| Headphones |  20.00 |     6 |    3.5000 |\n| Monitor    | 125.45 |     7 |    5.0000 |\n+------------+--------+-------+-----------+\n3 rows in set (0.01 sec)\n```\n---\nOnce you have completed these tasks press the _Check It!_ button to have your solution assessed.",
   "command": "node --no-warnings .guides/sqltests/sql-6-12.js",
   "points": 1
  }
 },
 {
  "type": "test",
  "taskId": "test-3982292097",
  "source": {
   "name": "SQL JOIN",
   "showName": true,
   "instructions": "A `sql-6-4.sql` file has been opened for you.\n\nWrite each of the following tasks as a SQL statement in a new line (remember that you can `source` the file to compare the output reference; plus, your order of the rows may differ; do not order the rows): \n\n1. Use the `e_store` database\n2. Write a `SELECT` - `JOIN` query that displays the following table:\n```\n+----+--------------+--------+-------+\n| id | product_name | price  | stars |\n+----+--------------+--------+-------+\n|  4 | Headphones   |  20.00 |     2 |\n|  3 | PC           | 157.40 |     3 |\n|  4 | Headphones   |  20.00 |     5 |\n+----+--------------+--------+-------+\n3 rows in set (0.02 sec)\n```\n\n---\nOnce you have completed these tasks press the _Check It!_ button to have your solution assessed.",
   "command": "node --no-warnings .guides/sqltests/sql-6-4.js",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "sql-6-4.sql"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "sql-6-4.sql"
     },
     {
      "type": "terminal",
      "panelNumber": 0,
      "content": "mysql"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-4081504502",
  "source": {
   "showName": true,
   "answers": [],
   "tokens": {
    "blank": [],
    "text": []
   },
   "name": "Multiple functions",
   "instructions": "A `sql-6-3.sql` file has been opened for you.\n\nWrite each of the following tasks as a SQL statement in a new line (remember that you can `source` the file to compare the output reference): \n\n1. In a single `SELECT` query, from the `e_store.products` table:\nDisplay the product with the least stock aliasing the column name as: `least_stock`, the newest product aliasing the column name as: `newest_product` and the most expensive product aliasing the column name as: `product_max_price`. \nThe output should look like this:\n```\n+-------------+---------------------+-------------------+\n| least_stock | newest_product      | product_max_price |\n+-------------+---------------------+-------------------+\n|           1 | 2015-10-30 06:30:30 |            157.40 |\n+-------------+---------------------+-------------------+\n1 row in set (0.01 sec)\n```\n\n---\nOnce you have completed these tasks press the _Check It!_ button to have your solution assessed.",
   "command": "node --no-warnings .guides/sqltests/sql-6-3.js",
   "points": 1
  }
 }
]